services:
  openfn:
    image: ${OPENFN_IMAGE}
    # This command runs a shell script that performs the following actions:
    # 1. Executes the Lightning.Release.migrate() function to handle database migrations.
    # 2. Starts the Lightning application using the /app/bin/lightning start command.
    command: >
      sh -c "/app/bin/lightning eval 'Lightning.Release.migrate()' && /app/bin/lightning start"
    deploy:
      labels:
        # Enable Traefik for this service
        - traefik.enable=true
        
        # HTTPS router for OpenFN subdomain
        - traefik.http.routers.openfn.rule=Host(`openfn.mwdhis2.info`)
        - traefik.http.routers.openfn.entrypoints=websecure
        - traefik.http.routers.openfn.tls=true
        - traefik.http.routers.openfn.tls.certresolver=le
        - traefik.http.services.openfn.loadbalancer.server.port=4000
        
        # HTTP to HTTPS redirect for OpenFN subdomain
        - traefik.http.routers.openfn-http.rule=Host(`openfn.mwdhis2.info`)
        - traefik.http.routers.openfn-http.entrypoints=web
        - traefik.http.routers.openfn-http.middlewares=to-https
        
        # Apply bigfiles middleware for large uploads
        - traefik.http.routers.openfn.middlewares=bigfiles
      resources:
        limits:
          cpus: '${OPENFN_DOCKER_WEB_CPUS:-0}'
          memory: '${OPENFN_DOCKER_WEB_MEMORY:-0}'
    environment:
      - DATABASE_URL=${OPENFN_DATABASE_URL}
      - DISABLE_DB_SSL=${OPENFN_DISABLE_DB_SSL}
      - IS_RESETTABLE_DEMO=${OPENFN_IS_RESETTABLE_DEMO}
      - LISTEN_ADDRESS=${OPENFN_LISTEN_ADDRESS}
      - LOG_LEVEL=${OPENFN_LOG_LEVEL}
      - ORIGINS=${OPENFN_ORIGINS}
      - PRIMARY_ENCRYPTION_KEY=${OPENFN_PRIMARY_ENCRYPTION_KEY}
      - SECRET_KEY_BASE=${OPENFN_SECRET_KEY_BASE}
      - WORKER_RUNS_PRIVATE_KEY=${OPENFN_WORKER_RUNS_PRIVATE_KEY}
      - WORKER_SECRET=${OPENFN_WORKER_SECRET}
      - KAFKA_TRIGGERS_ENABLED=${OPENFN_KAFKA_TRIGGERS_ENABLED}
    healthcheck:
      test: '${DOCKER_WEB_HEALTHCHECK_TEST:-curl localhost:4000/health_check}'
      interval: '10s'
      timeout: '3s'
      start_period: '5s'
      retries: 3
    networks:
      - kafka_public
      - postgres
      - traefik
  worker:
    image: ${OPENFN_WORKER_IMAGE}
    deploy:
      resources:
        limits:
          cpus: '${OPENFN_DOCKER_WORKER_CPUS:-0}'
          memory: '${OPENFN_DOCKER_WORKER_MEMORY:-0}'
    environment:
      - WORKER_LIGHTNING_PUBLIC_KEY=${OPENFN_WORKER_LIGHTNING_PUBLIC_KEY}
      - WORKER_SECRET=${OPENFN_WORKER_SECRET}
      - NODE_ENV=production
    command: [ 'pnpm', 'start:prod', '-l', 'ws://openfn:${URL_PORT-4000}/worker' ]
    networks:
      - kafka_public
      - openfn_public
      - postgres

networks:
  openfn_public:
    name: openfn_public
    external: true
  kafka_public:
    name: kafka_public
    external: true
  postgres:
    name: postgres_public
    external: true
  traefik:
    name: reverse-proxy-traefik_public
    external: true
  traefik:
    external: true
